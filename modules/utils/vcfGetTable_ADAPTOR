#-----------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:	    2017-05-18                                      
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/utils/utils.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .VCF   
# Output:                                   .txt   
# Purpose: Generate a variant table from '.VCF' files.
#   Can be called to output files into either the 
#   following directories:
#       "annotateVcfDIR"
#       "utilsDIR"
#-----------------------------------------------------------------------------------------------------------------------------------------------------
from time import gmtime, strftime
import subprocess
import ast

# Function used to generate the vcfFields passed as a parameter which is then used to create 
#   the table header-line. Function is able to process both 'single' and 'pair' samples.
def getVcfFields():
    finalString = config["vcfFields"]
    if config["sampleFORMAT"] == 'single' or config["sampleFORMAT"] == 'csv':
        finalString += " " + config["vcfInfoFieldsDbSnp"] + " " + config["vcfGenFieldsSingle"]
    elif config["sampleFORMAT"] == 'pair':
        finalString += " " + config["vcfInfoFieldsPair"] + " " + config["vcfGenFieldsPair"]
    return finalString
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Function used to parse the sample name from the file name, without explicitly using regex, 
#   while still being able to process both 'single' and 'pair' samples.
def getSampleName(outputFileName):
    # 1.A - Process if single
    if config["sampleFORMAT"] == 'single' or config["sampleFORMAT"] == 'csv':
        # 1.A.1 For list of samples, if sample name in file name, return sample name. .
        for sample in config["sample"]:
            if sample in outputFileName:
                return sample
    # 1.B - Process if pair
    elif config["sampleFORMAT"] == 'pair':
        # 1.B.1 - For list of paired samples, if paired sample name in file name, return paired sample name.
        for sample in pandas.read_table(config["sampleFILE"], " ").iterrows():
            nameTumorNormal= sample[1]["tumor"] + '_' + sample[1]["normal"]
            if str(nameTumorNormal) in str(outputFileName):
                return nameTumorNormal
    # 1.C - Process on error.
    else:
        print("**Error** Sample name unable to be parsed from file name")
        return "getSampleNameFailed"
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def getTable(input, output, logNAME, allVcfFields):
    # 1.A - Open and begin working with the intended output target.
    with open(str(output), "w+") as outputTARGET:

        # 1.A.1 - If flag set, will pipe input through Perl Script.
        if config["OnePerLineFLAG"] == True:
            callString="cat " + str(input) + " | " + config["annotateVcf_vcfEffOnePerLineProg"] \
            + " | " + config["utils_javaProg"] + ' ' + config["annotateVcf_snpSiftProg"] \
            + ' extractFields - ' + str(allVcfFields) + ' ' + " ".join(config["effFields"])

            # 1.A.1.1 - Differing output redirection as when not on cluster we cannot use the cluster config file.
            if config["offCluster"]:
                callString += ' 2> ' + str(log) + '/' + str(logNAME) + '.OnePerLine.stderr'
    
        # 1.A.2 - If flag not set, will not pipe input through Perl Script.
        else:
            callString=config["utils_javaProg"] + ' ' + config["annotateVcf_snpSiftProg"] \
            + ' extractFields ' + str(input) + ' ' + str(allVcfFields) + ' ' + " ".join(config["effFields"]) \

            # 1.A.2.1 - Differing output redirection as when not on cluster we cannot use the cluster config file.
            if config["offCluster"]:
                callString += ' 2> ' + str(log) + '/' + str(logNAME) + '.stderr'

        # 1.B - Call the function and capture its output to modify each line.
        call('echo "' + str(logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        fileSTREAM = subprocess.Popen(callString, stdout=subprocess.PIPE, shell=True)

        # 1.C - Initially read and edit just the first, adding 'SAMPLE' to header line.
        outputTARGET.write("SAMPLE\t%s" % fileSTREAM.stdout.readline().decode("utf-8").replace("#",""))

        # 1.D - Add the sampleName to each line after the header line, stripping excess whitespace.
        for line in fileSTREAM.stdout:
            outputTARGET.write(getSampleName(str(output)) + "\t%s\n" % line.decode("utf-8").strip())
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# varScan -- Adaptor for merging of tables generated by varScan module. 
rule vcfGetTable_utilsDIR:
    input:
        expand("{outputDIR}/{annotateVcfDIR}/{{sampleVCFGT}}.vcf", outputDIR=config["outputDIR"], annotateVcfDIR=config["annotateVcfDIR"])
    output:
        expand("{outputDIR}/{utilsDIR}/{{sampleVCFGT}}.txt", outputDIR=config["outputDIR"], utilsDIR=config["utilsDIR"])
    params:
        logNAME="vcfGetTable_utilsDIR." + strftime("%Y-%m-%d.%H-%M-%S", gmtime()),
        allVcfFields=getVcfFields()
    log:
        "log/" + config["utilsDIR"]
    run:
        getTable(input, output, params.logNAME, params.allVcfFields)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# varScan -- Adaptor for merging of tables generated by varScan module. 
rule vcfGetTable_annotateVcfDIR:
    input:
        expand("{outputDIR}/{annotateVcfDIR}/{{sampleVCFGT}}.vcf", outputDIR=config["outputDIR"], annotateVcfDIR=config["annotateVcfDIR"])
    output:
        expand("{outputDIR}/{annotateVcfDIR}/{{sampleVCFGT}}.txt", outputDIR=config["outputDIR"], annotateVcfDIR=config["annotateVcfDIR"])
    params:
        logNAME="vcfGetTable_annotateVcfDIR." + strftime("%Y-%m-%d.%H-%M-%S", gmtime()),
        allVcfFields=getVcfFields()
    log:
        "log/" + config["annotateVcfDIR"]
    run:
        getTable(input, output, params.logNAME, params.allVcfFields)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
