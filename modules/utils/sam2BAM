#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-05-29
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/processBam/processBam.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                            .BAM        
# Output:                                           _sorted.BAM 
# Purpose: Produce a '.SAM' file from a '.BAM' file. 
#   *** NOTE *** Input files are always kept. No way via this
#       script to automate their destruction. This was done to
#       avoid the risk of deleting the original '.BAM' files.
#-----------------------------------------------------------------------------------------------------------------------------------------------------

# Used for system calls.
import subprocess

# Used for timestamping the log files.
from time import localtime, strftime

#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
rule sam2BAM:
    input:
        "{pipelineOutputDIR}/{ruleOutputDIR}/{sampleS2B}.sam"
    output:
        "{pipelineOutputDIR}/{ruleOutputDIR}/{sampleS2B}.bam"
    params:
        logNAME="sam2BAM." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["processBamDIR"] + '/sam2BAM'
    run:
        # 1.A - Base call string.
        callString=config["processBam_samtoolsProg"] + ' view ' + config["Sam2BamARGS"] + ' ' + str(input) + ' > ' + str(output) \
        
        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log) + '/' + str(params.logNAME) + '.samtools.stderr'

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
