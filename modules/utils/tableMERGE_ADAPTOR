#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:     2017-03-28
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/utils/utils.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    '1.VCF', '2.VCF'
# Output:                                   '12.VCF'
# Purpose: Merge variant tables.
#  **Warning** Assumes that you want to merge all the tables 
#   from files which are listed in your sample file.
#  **Warning** Must write back to the directory the input 
#   files are contained within.
#-----------------------------------------------------------------------------------------------------------------------------------------------------
from time import localtime, strftime
from subprocess import call
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Generate list of required input files with respect to the sampleFORMAT type.
def getInputFileList(wildcards):
    # Process if single
    if config["sampleFORMAT"] == 'single' or config["sampleFORMAT"] == 'csv':
        return unpack(expand("{outputDIR}/" + wildcards.tableMergeDIR + "/{samples}.{fileSuffix}.txt",
            outputDIR=config["outputDIR"], utilsDIR=config["utilsDIR"],
            samples=config["sample"], fileSuffix=wildcards.annotationSUFFIX))
    # Process if pair
    elif config["sampleFORMAT"] == 'pair':
        return unpack(expand("{outputDIR}/" + wildcards.tableMergeDIR + "/{sample[1][tumor]}_{sample[1][normal]}.{fileSuffix}.txt",
            outputDIR=config["outputDIR"], utilsDIR=config["utilsDIR"],
            sample=pandas.read_table(config["sampleFILE"], " ").iterrows(), fileSuffix=wildcards.annotationSUFFIX))
#-----------------------------------------------------------------------------------------------------------------------------------------------------
def tableMERGE(input, output, logNAME):
    # 1.A - Copy over the header-line that is shared across all '.TXT' files, using BASH Shell command becuase smaller overhead than opening the file in python.
    call("head -n 1 " + str(input[0]) + " > " + str(output), shell=True)
    
    # 2.A Copy over contents, less header-line, of each file.
    with open(str(output), "a+") as outputTARGET:
        # 2.B.1 Open each file, from a list of files, copying all lines except for the first.
        for file in str(input).split():
            with open(file, "r+") as inputTARGET:
                next(inputTARGET)
                for line in inputTARGET:
                    outputTARGET.write(line)

    # 3.A Write a descriptive line to the shell call log.
    call('echo "' + str(logNAME) + ':\n **Python Scripts Merging Files. No Shell Calls**\n Input: ' + str(input) + '\nOutput: ' + str(output) + '" >> ' + config["shellCallFile"], shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
rule tableMERGE:
    input:
        # Need to provide sample names, generation of list different for 'single' versus 'pair'
        getInputFileList
    output:
        expand("{outputDIR}/{{tableMergeDIR}}/all.samples.{{annotationSUFFIX}}.txt", outputDIR=config["outputDIR"])
    params:
        logNAME="tableMERGE." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["utilsDIR"]
    run:
        tableMERGE(input, output, params.logNAME)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
