#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-06-30
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/bamUtil/bamUtil.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                            {sample}.bam 
#
# Output:                                           {sample}_rmdup.bam      
#
# Purpose: Produce a '.bam' file with duplicate reads removed.         
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for system calls.
from subprocess import call

# Used for timestamping the log files.
from time import localtime, strftime
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule rmdupBAM:
    input:
        inputBAM = "{pathRDB}/{sampleRDB}.bam"
    output:
        rmdupBAM = temp("{pathRDB}/{sampleRDB}_rmdup.bam")
    log:
        stdErr = "log/" + config["bamUtilDIR"] + '/rmdupBAM/rmdupBAM_{sampleRDB}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run:
        # 1.A - Base call string.
        callString=config["bamUtil_samtoolsProg"] + ' rmdup ' + str(input.inputBAM) + ' ' + str(output.rmdupBAM)
       
        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr) 

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr)[:-7] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
