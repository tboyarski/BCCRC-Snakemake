#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-06-28
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/bamUtil/bamUtil.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    ./{bamDIR}/{sample}.bam        
#
# Output:                                   ./{bamDIR}/{sample}.bam.bai    
#                                           ./{bamDIR}/{sample}.bam.bai
#                                           ./{bamDIR}/{sample}.bam.bai
#
# Purpose: Produce an indexed BAM file.                             
#
#   **NOTE** Input files are always kept. No way via this 
#       script to automate their destruction. This was done to
#       avoid the risk of deleting the original '.bam' files.
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for system calls.
from subprocess import call

# Used to get current working directory
from os import getcwd

# Used for timestamping the log files.
from time import localtime, strftime
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule indexBAM:
    input:
        inputBAM = expand("{{outputDIR}}/{bamDIR}/{{sampleIB}}{fileTag}.bam", bamDIR=config["bamDIR"], fileTag=config["fileTag"])
    output:
        outputBAI = expand("{{outputDIR}}/{bamDIR}/{{sampleIB}}{fileTag}.bam.bai",  bamDIR=config["bamDIR"], fileTag=config["fileTag"]),
        symLinkedBAI = expand("{{outputDIR}}/{bamDIR}/{{sampleIB}}.bam.bai", bamDIR=config["bamDIR"]),
        symLinkedBAM = expand("{{outputDIR}}/{bamDIR}/{{sampleIB}}.bam", bamDIR=config["bamDIR"])
    wildcard_constraints:
        # Wildcard cannont contain a '_'
        sampleIB = config["sampleREGEX"]
    log:
        stdErr = "log/" + config["bamUtilDIR"] + '/indexBAM/indexBAM_{sampleIB}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run:
        # 1.A - Base call string.
        callString=config["bamUtil_samtoolsProg"] + ' index ' + str(input.inputBAM) + ' ' + str(output.outputBAI)

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)

        # 1.C - Creating a symlink of the finalized output '.bam.bai' to be placed in a different directory 
        #   for better controlflow and to remove the bamUtil module processing tags from the file name.
        callString += ' && ln -fs ' + getcwd() + '/' + str(output.outputBAI) + ' ' + getcwd() + '/' + str(output.symLinkedBAI)
        
        # 1.D - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2>> ' + str(log.stdErr)
        
        # 1.E - Creating a symlink of the finalized output '.bam' to be placed in a different directory 
        #   for better controlflow and to remove the bamUtil module processing tags from the file name.
        callString += ' && ln -fs ' + getcwd() + '/' + str(input.inputBAM) + ' ' + getcwd() + '/' + str(output.symLinkedBAM)
        
        # 1.F - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2>> ' + str(log.stdErr)
        
        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr)[:-7] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
