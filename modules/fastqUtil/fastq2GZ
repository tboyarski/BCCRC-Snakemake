#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-06-28
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/fastqUtil/fastqUtil.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                            {sample}.fastq      
#
# Output:                                           {sample}.fastq.gz   
#
# Purpose: Compress a '.fastq' file into a '.fastq.gz' file.    
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for timestamping the log files.
from time import localtime, strftime

# Used for system calls.
from subprocess import call
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule fastq2GZ:
    input:
        inputFastq = "{pathFGZ}/{sampleFGZ}.fastq"
    output:
        outputGZ = temp("{pathFGZ}/{sampleFGZ}.fastq.gz")
    log:
        stdErr = "log/" + config["fastqUtilDIR"] + '/fastq2GZ/fastq2GZ_{sampleFGZ}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run:
        # 1.A - Basecall string.
        callString='gzip -c ' + str(input.inputFastq) + ' > ' + str(output.outputGZ)

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)

        # 2.A - Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr)[:-7] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
