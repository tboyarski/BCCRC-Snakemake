#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-06-21
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/utils/utils.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .vcf   
#
# Output:                                   .sorted.vcf   
#
# Purpose: Sort a '.VCF' file.
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for timestamping the log files.
from time import localtime, strftime

# Used for system calls.
from subprocess import call
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE # 
rule sortVCF:
    input:
        inputVCF = "{pathSVCF}/{sampleSVCF}.vcf"
    output:
        outputVCF = temp("{pathSVCF}/{sampleSVCF}_sorted.vcf")
    params:
        picardARGS = config["vcfSORTValStringency"] + ' ' + config["vcfSORTMaxRec"]
    log:
        stdErr = "log/" + config["vcfUtilDIR"] + '/sortVCF/sortVCF_{sampleSVCF}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run: 
        # 1.A - Base call string.
        callString=config["vcfUtil_picardProg"] + ' SortVcf ' + str(params.picardARGS)  \
        + ' I= ' + str(input.inputVCF) + ' O=' + str(output.outputVCF) + ' SEQUENCE_DICTIONARY=' + config["vcfSORTSeqDict"]
    
        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)
    
        # 2.A - Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr)[:-7] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
