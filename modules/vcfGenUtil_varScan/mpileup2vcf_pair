#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:     2017-06-16
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + ROOT_PATH + "/modules/varScan/varScan.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .mpileup
#
# Output:                                   .snp.vcf
#                                           .indel.vcf
#
# Purpose: Generate '.VCF' output from a '.mpileup' file.         
#
#   **Note** Varscan somatic must produce both snp and
#       indel file, no calls exist to get only one or other.
#       Vartype must always equal ['snp', 'indel'].
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for timestamping the log files.
from time import localtime, strftime

# Used for system calls.
from subprocess import call
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
rule mpileup2vcf_pair:
    input:
        normalMpileup = expand("{outputDIR}/{mpileupDIR}/{{samplenMPU2VCFP}}{{chrMPU2VCFP}}.mpileup", outputDIR=config["outputDIR"], mpileupDIR=config["mpileupDIR"]),
        tumorMpileup = expand("{outputDIR}/{mpileupDIR}/{{sampletMPU2VCFP}}{{chrMPU2VCFP}}.mpileup", outputDIR=config["outputDIR"], mpileupDIR=config["mpileupDIR"])
    output:
        outputVCF = temp(expand("{outputDIR}/{vcfGenUtil_varScanDIR}/{{sampletMPU2VCFP}}_{{samplenMPU2VCFP}}{{chrMPU2VCFP}}.varScan.{varTypeMPU2VCFP}.vcf", outputDIR=config["outputDIR"], vcfGenUtil_varScanDIR=config["vcfGenUtil_varScanDIR"], varTypeMPU2VCFP=config["varType"]))
    wildcard_constraints:
        # Constrain both wildcards to not start with '-' '_' or '\', must be comprised of only letters and numbers
        sampletMPU2VCFP = config["sampleREGEX"],
        samplenMPU2VCFP = config["sampleREGEX"],
        # May or may not start with _, then consists of any number of letter, number or _, and must finish with a '.' AND a digit, or no '.' AND a digit
        chrMPU2VCFP = config["chrREGEX"]
    params:
        baseArgs=config["minCoverage"]+" "+config["minRead"]+" "+config["minQuality"]+" "+config["minFrequency"]+" "+config["pValue"]+" "+config["strandFilter"]+" "+config["outVCF"]+" "+config["minStrand"]+" "+config["posValid"]
    log:
        stdErr = "log/" + config["vcfGenUtil_varScanDIR"] + '/mpileup2vcf_pair/mpileup2vcf_pair_{sampletMPU2VCFP}_{samplenMPU2VCFP}_chr{chrMPU2VCFP}.SNPandINDEL.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run:
        # 1.A - Base call string.
        callString=config["vcfGenUtil_varScan_varScanProg"] + ' somatic ' + str(input.normalMpileup) + ' ' + str(input.tumorMpileup) \
        +  ' --output-snp ' + str(output.outputVCF[0]) + ' --output-indel ' + str(output.outputVCF[1]) + ' ' + str(params.baseArgs)

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr)[:-7] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
