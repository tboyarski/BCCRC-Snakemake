#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-05-29
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/processBam/processBam.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .bam        
# Output:                                   .bam.bai    
# Purpose: Produce an indexed BAM file.                             
#-----------------------------------------------------------------------------------------------------------------------------------------------------

# Used for system calls.
from subprocess import call

# Used to get current working directory
from os import getcwd

# Used for timestamping the log files.
from time import localtime, strftime

#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
rule indexBAM:
    input:
        expand("{outputDIR}/{processBamDIR}/{{sampleIB}}{fileTAG}.bam", outputDIR=config["outputDIR"], processBamDIR=config["processBamDIR"], fileTAG=config["fileTAG"])
    output:
        expand("{outputDIR}/{processBamDIR}/{{sampleIB}}{fileTAG}.bam.bai", outputDIR=config["outputDIR"], processBamDIR=config["processBamDIR"], fileTAG=config["fileTAG"]),
        expand("{outputDIR}/{bamDIR}/{{sampleIB}}.bam.bai", outputDIR=config["outputDIR"], bamDIR=config["bamDIR"]),
        expand("{outputDIR}/{bamDIR}/{{sampleIB}}.bam", outputDIR=config["outputDIR"], bamDIR=config["bamDIR"])
    params:
        logNAME="indexBAM." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["processBamDIR"] + '/indexBAM'
    run:
        # 1.A - Base call string.
        callString=config["processBam_samtoolsProg"] + ' index ' + str(input) + ' ' + str(output[0])

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log) + '/' + str(params.logNAME) + '.samtools.stderr'

        # 1.C - Creating a symlink of the finalized output '.bam.bai' to be placed in a different directory 
        #   for better controlflow and to remove the processBam module processing tags from the file name.
        callString += ' && ln -fs ' + getcwd() + '/' + str(output[0]) + ' ' + getcwd() + '/' + str(output[1])
        
        # 1.D - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2>> ' + str(log) + '/' + str(params.logNAME) + '.samtools.stderr'
        
        # 1.E - Creating a symlink of the finalized output '.bam' to be placed in a different directory 
        #   for better controlflow and to remove the processBam module processing tags from the file name.
        callString += ' && ln -fs ' + getcwd() + '/' + str(input) + ' ' + getcwd() + '/' + str(output[2])
        
        # 1.F - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2>> ' + str(log) + '/' + str(params.logNAME) + '.samtools.stderr'
        
        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-------------------------------------------------------------------------------------------------------
