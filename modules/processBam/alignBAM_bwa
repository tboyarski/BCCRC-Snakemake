#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-05-29                                    
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/processBam/processBam.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    1.fastq         
#                                           2.fastq         
# Output:                                   _realigned.bam  
# Purpose: Created a BAM, from paired-end fastq reads, using
#   a reference genome as a guideline.                      
#   **NOTE** The ability to keep this specific set of input 
#       files is controlled by the global variable "fastqKEEP"
#   
# Troubleshooting:
#   1. Error Message:                                       
#       [E::bwa_idx_load] fail to locate the index files    
#       [samopen] no @SQ lines in the header.               
#       [sam_read1] missing header? Abort!                  
#   1. Reason:                                              
#       Your ref/ must contain the following:               
#           GRCh37-lite.fa.fa       -- Rule Input           
#           GRCh37-lite.fa.amb      -- BWA_MEM uses         
#           GRCh37-lite.fa.ann      -- BWA_MEM uses         
#           GRCh37-lite.fa.bwt      -- BWA_MEM uses         
#           GRCh37-lite.fa.pac      -- BWA_MEM uses         
#           GRCh37-lite.fa.sa       -- BWA_MEM uses         
#-----------------------------------------------------------------------------------------------------------------------------------------------------

# Used for piping of stdout, and for system calls.
import subprocess

# Used for timestamping the log files.
from time import localtime, strftime

# Used for removing a substring (_lane_) when present in sample name.
from re import sub

#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
rule alignBAM_bwa:
    input:
        expand("{outputDIR}/{fastqDIR}/{{sampleAB}}.{readDirection}.fastq.gz", outputDIR=config["outputDIR"], fastqDIR=config["fastqDIR"], readDirection=["1", "2"]),
        expand("{inputDIR}/{refDIR}/{refFILE}", inputDIR=config["inputDIR"], refDIR=config["refDIR"], refFILE=config["refFILE"])
    output:
        expand("{outputDIR}/{processBamDIR}/{{sampleAB}}_realigned.bam", outputDIR=config["outputDIR"], processBamDIR=config["processBamDIR"])
    params:
        # In the event the sample name has a lane number, remove it.
        baseFILE=re.sub('_lane_\d','',"{sampleAB}"),
        # Adding to read group header line.
        readGroupString1='-R \"@RG\tID:{sampleAB}\tLB:',
        readGroupString2='\tPL:'+config["seqPlatform"]+'\tSM:',
        baseARGS=config["coreNumber"] + ' ' + config["picardCompatibility"],
        fastxBaseARGS=config["phred64"] + ' ' + config["firstBaseToKeep"] + ' ' + config["lastBaseToKeep"],
        logNAME="alignBAM_bwa." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["processBamDIR"] + '/alignBAM_bwa'
    run:
        # 1.A - Base call string.
        callString=config["processBam_bwaProg"] + ' mem ' + str(params.baseARGS) + ' ' \
        + str(params.readGroupString1) + str(params.baseFILE) + str(params.readGroupString2) + str(params.baseFILE + '\"') + ' ' + str(input[2])
           
        # 1.B - Set input sources, depending on if trimming.
        if config["trimReadsFLAG"]:
            # 1.B.1 - Uncompressed and pipe '.fastq' files into Fastx Trimmer
            trimCall0 ='gunzip -c ' + str(input[0]) + ' | ' + config["processBam_fastxProg"] + ' ' + str(params.fastxBaseARGS) + ' -'
            inputSource0 = subprocess.Popen(trimCall0, stdout=subprocess.PIPE, shell=True)
            trimCall1 ='gunzip -c ' + str(input[1]) + ' | ' + config["processBam_fastxProg"] + ' ' + str(params.fastxBaseARGS) + ' -'
            inputSource1 = subprocess.Popen(trimCall1, stdout=subprocess.PIPE, shell=True)
        else:
            ## 1.B.2 - Regular input sources
            inputSource0=str(input[0])
            inputSource1=str(input[1])

        # 1.C - End of callString always requires both input sources.
        callString+= ' ' + inputSource0 + ' ' + inputSource1

        # 1.D - Differing output redirection on first call as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log) + '/' + str(params.logNAME) + '.bwa.stderr'

        # 1.E - Additional piping of data for better formatting through samtools. 
        callString += ' | ' + config["processBam_samtoolsProg"] + ' view -bhS - > ' + str(output)

        # 1.F - Differing output redirection on first call as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log) + '/' + str(params.logNAME) + '.samtools.stderr'

        # 1.G - Add short ciruiting removal of inputs to end of shell call.
        if config["fastqKEEP"] == False:
            callString += ' && rm ' + str(input[0]) + ' ' + str(input[1])

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
