#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:	    2017-06-28
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/bamGen/bamGen.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    {sample}.1.fastq         
#                                           {sample}.2.fastq         
#                                           
# Output:                                   {sample}_Aligned.out.bam  
#
# Purpose: Created a BAM, from paired-end fastq reads, using
#   a reference genome as a guideline.                      
#   **NOTE** The ability to keep this specific set of input 
#       files is controlled by the global variable "fastqKEEP"
#   
# Troubleshooting:
#   1. Error Message:                                       
#       [E::bwa_idx_load] fail to locate the index files    
#       [samopen] no @SQ lines in the header.               
#       [sam_read1] missing header? Abort!                  
#   1. Reason:                                              
#       Your ref/ must contain the following:               
#           GRCh37-lite.fa          -- Rule Input           
#           GRCh37-lite.fa.amb      -- BWA_MEM uses         
#           GRCh37-lite.fa.ann      -- BWA_MEM uses         
#           GRCh37-lite.fa.bwt      -- BWA_MEM uses         
#           GRCh37-lite.fa.pac      -- BWA_MEM uses         
#           GRCh37-lite.fa.sa       -- BWA_MEM uses         
#   2. Error Message:                                       
#       [samopen] no @SQ lines in the header.               
#       [sam_read1] missing header? Abort!                  
#   2. Reason:                                              
#       This can appear when the input files are not properly
#       formatted. This can be either becuase you are providing 
#       it the wrong 3rd and 4th arguments, which it must interpret
#       as files, or, you're giving it the right files but the 
#       files have been stripped of their headers. 
#       OR
#       This can appear because the bwa reference files are were
#       not generated by the same bwa version currently being used.
#       bwa versions must generate their own reference files. The
#       differences are most notable in the '.fa.sa' file, but still,
#       users should be generating all the files using the respective
#       bwa version for their pipeline.
#
#
#  3. core files appear in the root project directory.
#       You're using the wrong reference genome.
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for piping of stdout, and for system calls.
from subprocess import call, Popen, PIPE

# Used for timestamping the log files.
from time import localtime, strftime

# Used for removing a substring (_lane_) when present in sample name.
from re import sub

# Used for the mock process substitution
from tempfile import NamedTemporaryFile
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule bamALIGN_bwa:
    input:
        fastqGzPair = expand("{outputDIR}/{fastqDIR}/{{sampleBAB}}.{readDirection}.fastq.gz", outputDIR=config["outputDIR"], fastqDIR=config["fastqDIR"], readDirection=["1", "2"]),
        refFile = config["bwa_refFILE"],
        supportingRefFile = expand("{supportingRefFILE}", supportingRefFILE=config["bwa_supportingRefFILE"])
    output:
        outputBam = temp(expand("{outputDIR}/{bamDIR}/{{sampleBAB}}_Aligned.out.bam", outputDIR=config["outputDIR"], bamDIR=config["bamDIR"]))
    params:
        # In the event the sample name has a lane number, remove it.
        baseFILE=re.sub('_lane_\d','',"{sampleBAB}"),
        # Adding to read group header line.
        readGroupString1="-R '@RG\\tID:{sampleBAB}\\tLB:",
        readGroupString2="\\tPL:"+config["seqPlatform"]+"\\tSM:",
        baseARGS=config["coreNumber"] + ' ' + config["picardCompatibility"],
        fastxBaseARGS=config["phred64"] + ' ' + config["firstBaseToKeep"] + ' ' + config["lastBaseToKeep"]
    log:
        stdErr_bwa = "log/" + config["bamGenDIR"] + '/bamALIGN_bwa/bamALIGN_bwa_{sampleBAB}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.bwa.stderr',
        stdErr_samtools = "log/" + config["bamGenDIR"] + '/bamALIGN_bwa/bamALIGN_bwa_{sampleBAB}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.samtools.stderr'
    run:
        # 1.A - Base call string.
        callString=config["bamGen_bwaProg"] + ' mem ' + str(params.baseARGS) + ' ' \
        + str(params.readGroupString1) + str(params.baseFILE) + str(params.readGroupString2) + str(params.baseFILE + "'") + ' ' + str(input.refFile)
           
        # 1.B - Set input sources, depending on if trimming.
        if config["trimReadsFlag"]:
            # 1.B.1 - Uncompressed and pipe '.fastq' files into Fastx Trimmer
            trimCall0 ='gunzip -c ' + str(input.fastqGzPair[0]) + ' | ' + config["bamGen_fastxProg"] + ' ' + str(params.fastxBaseARGS) + ' -'
            with NamedTemporaryFile(delete=False) as inputSourceObject0:
                call(trimCall0, stdout=inputSourceObject0, shell=True)
            trimCall1 ='gunzip -c ' + str(input.fastqGzPair[1]) + ' | ' + config["bamGen_fastxProg"] + ' ' + str(params.fastxBaseARGS) + ' -'
            with NamedTemporaryFile(delete=False) as inputSourceObject1:
                call(trimCall1, stdout=inputSourceObject1, shell=True)
            inputSource0=inputSourceObject0.name
            inputSource1=inputSourceObject1.name
        else:
            ## 1.B.2 - Regular input sources
            inputSource0=str(input.fastqGzPair[0])
            inputSource1=str(input.fastqGzPair[1])

        # 1.C - End of callString always requires both input sources.
        callString+= ' ' + inputSource0 + ' ' + inputSource1

        # 1.D - Differing output redirection on first call as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr_bwa)

        # 1.E - Additional piping of data for better formatting through samtools. 
        callString += ' | ' + config["bamGen_samtoolsProg"] + ' view -bhS - > ' + str(output.outputBam)

        # 1.F - Differing output redirection on first call as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr_samtools)

        # 1.G - Add short ciruiting removal of inputs to end of shell call.
        if config["fastqKEEP"] == False:
            callString += ' && rm ' + str(input.fastqGzPair[0]) + ' ' + str(input.fastqGzPair[1])

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr_bwa)[:-11] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
