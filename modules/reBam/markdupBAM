#---------------------------------------------------------------
# Author:   Tim Boyarski                                        
# Date:	    2017-03-06                                          
#---------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/reBam/reBam.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                            .BAM        
# Output:                                           _sorted.BAM 
# Purpose: Produce a metrics file with the marked duplicated and
#   also marks them in the BAM file.                            
#---------------------------------------------------------------
from time import localtime, strftime
from subprocess import call

rule markdupBAM:
    input:
        expand("{outputDIR}/{reBamDIR}/{{sampleMDB}}.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"])
    output:
        expand("{outputDIR}/{reBamDIR}/{{sampleMDB}}_markdup.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"]),
        expand("{outputDIR}/{metricsDIR}/{{sampleMDB}}.dup_metrics", outputDIR=config["outputDIR"], metricsDIR=config["metricsDIR"])
    params:
        logNAME="sortBAM." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["reBamDIR"]
    run:
        callString=config["markdupBAM_samtoolsProg"] + ' view -b ' + str(input) \
        + ' 2> ' + str(log) + '/' + str(params.logNAME) + '.samtools.stderr' \
        + ' | ' + config["markdupBAM_bammarkduplicatesProg"] + ' I=' + str(input) + ' O=' + str(output[0]) + ' M=' + str(output[1]) \ 
        + ' 2> ' + str(log) + '/' + str(params.logNAME) + '.biobammarkdup.stderr'
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-------------------------------------------------------------------------------------------------------
