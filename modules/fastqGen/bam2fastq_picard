#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:	    2017-06-28
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/fastqGen/fastqGen.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    {sample}.bam
#
# Output:                                   {sample}.1.fastq
#                                           {sample}.2.fastq     
#
# Purpose: Generate the original fastq paired-end reads     
#   from a BAM file, via Picard.                            
#
#   **NOTE** Input files are always kept. No way via this 
#       script to automate their destruction. This was done to
#       avoid the risk of deleting the original '.BAM' files.
#
#   **NOTE** The process substitution removed as this is 
#       a OS specific comand.
#
#   **NOTE** The "/dev/stdin/" on line 57 makes this module
#       incompatible with non-UNIX systems. 
#
#   **NOTE** Newer versions of Samtools (E.g. 1.4.1) require
#       different arguments for sorted (Line 55). Use the following 
#       replacement line when using newer versions of samtools
#       callString += ' | ' + config["fastqGen_samtoolsProg"] + ' sort -n -m ' + str(config["fastqGen_fastqGen_samtoolsSortMem"]) + ' - -T' + str(params.logNAME) + '.namesort'
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for timestamping the log files.
from time import localtime, strftime

# Used for system calls.
from subprocess import call
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule bam2fastq_picard:
    input: 
        inputBAM = expand("{inputDIR}/{rawBamDIR}/{{sampleB2FP}}.bam", inputDIR=config["inputDIR"], rawBamDIR=config["rawBamDIR"])
    output:
        fastqPair = expand("{outputDIR}/{fastqDIR}/{{sampleB2FP}}.{readDirection}.fastq", outputDIR=config["outputDIR"], fastqDIR=config["fastqDIR"], readDirection=["1", "2"])
    params:
        picardARGS=config["fastqGen_picardValStringency"] + ' ' + config["fastqGen_picardMaxRec"]
    log:
        stdErr_vendorFailedReads = "log/" + config["fastqGenDIR"] + '/bam2fastq_picard/bam2fastq_picard_{sampleB2FP}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.vendor_failed_reads.log',
        stdErr_nameSort = "log/" + config["fastqGenDIR"] + '/bam2fastq_picard/bam2fastq_picard_{sampleB2FP}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.namesort.stderr',
        stdErr = "log/" + config["fastqGenDIR"] + '/bam2fastq_picard/bam2fastq_picard_{sampleB2FP}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run:
        # 1.A - Base call string.
        callString = config["fastqGen_samtoolsProg"] + ' view -bF 512 ' + str(input.inputBAM)
        
        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> '  + str(log.stdErr_vendorFailedReads)

        # 1.C - Continuation of base call by piping data into sorting algorithm.
        callString += ' | ' + config["fastqGen_samtoolsProg"] + ' sort -no -m ' + str(config["fastqGen_fastqGen_samtoolsSortMem"]) + ' - ' + str(log.stdErr_nameSort)[:-7]
        
        # 1.D - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> '  + str(log.stdErr_nameSort) 
               
        # 1.E - Continuation of base call by piping sorted data into conversion tool.
        # **Note** The inline process substitution in the second line may be causing issues on MacOSX.
        callString += ' | ' + config["fastqGen_picardProg"] + ' SamToFastq ' + str(params.picardARGS) \
        + ' I=/dev/stdin FASTQ=' + str(output.fastqPair[0]) + ' SECOND_END_FASTQ=' + str(output.fastqPair[1])
        
        # 1.F - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)
        
        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr)[:-7] + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
