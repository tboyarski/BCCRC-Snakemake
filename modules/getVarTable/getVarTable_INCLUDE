#-----------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:	    2017-03-28                                      
#-----------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/getVarTable/getVarTable.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .VCF   
# Output:                                   .varTable   
# Purpose: Generate a variant table from '.VCF' files.
#-----------------------------------------------------------
from time import gmtime, strftime
import subprocess
import ast

def getVcfFields():
    finalString = config["vcfFields"]
    if config["sampleFORMAT"] == 'single' or config["sampleFORMAT"] == 'csv':
        finalString += " " + config["vcfInfoFieldsDbSnp"] + " " + config["vcfGenFieldsSingle"]
    elif config["sampleFORMAT"] == 'pair':
        finalString += " " + config["vcfInfoFieldsPair"] + " " + config["vcfGenFieldsPair"]
    return finalString


rule getVarTable:
    input:
        expand("{outputDIR}/{annotateDIR}/{{sampleGVT}}.varScan.{{varTypeGVT}}.vcf", outputDIR=config["outputDIR"], annotateDIR=config["annotateDIR"])
    output:
        expand("{outputDIR}/{getVarTableDIR}/{{sampleGVT}}.varScan.{{varTypeGVT}}.txt", outputDIR=config["outputDIR"], getVarTableDIR=config["getVarTableDIR"])
    params:
        logNAME="getVarTable." + strftime("%Y-%m-%d.%H-%M-%S", gmtime()),
        allVcfFields=getVcfFields()
    log:
        "log/" + config["getVarTableDIR"]
    run:
        with open(config["outputDIR"] + '/' + config["getVarTableDIR"] + '/' + str(wildcards.sampleGVT) + ".varScan." + str(wildcards.varTypeGVT) + ".txt", "w+") as outputTARGET:
            # Check for flag in legacy code, not sure what snpEff script does.
            if config["getVarTableFlag"] == True:
                # Preprocessing through vcEffOnePerLine and piping into snpSift call.
                callString="cat " + str(input) + " | " + config["getVarTable_vcfEffOnePerLineProg"] \
                + " | " + config["getVarTable_javaProg"] + ' ' + config["getVarTable_snpSiftProg"] \
                + ' extractFields - ' + str(params.allVcfFields) + ' ' + " ".join(config["effFields"]) \
                + " 2> " + str(log) + "/" + str(params.logNAME)
            else:
                # No piping of input into call, can just use str(input) in snpSift call.
                callString=config["getVarTable_javaProg"] + ' ' + config["getVarTable_snpSiftProg"] \
                + ' extractFields ' + str(input) + ' ' + str(params.allVcfFields) + ' ' + " ".join(config["effFields"]) \
                + " 2> " + str(log) + "/" + str(params.logNAME)
            
            # Call the function and capture its output to modify each line.
            call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
            fileSTREAM = subprocess.Popen(callString, stdout=subprocess.PIPE, shell=True)

            # Initially read and edit just the first, adding 'SAMPLE' to header line.
            #outputTARGET.write("SAMPLE \t%s" % fileSTREAM.stdout.readline().decode("utf-8"))
            outputTARGET.write("SAMPLE\t%s" % fileSTREAM.stdout.readline().decode("utf-8").replace("#",""))

            # Add the sampleName to each line after the header line.
            for line in fileSTREAM.stdout:
                # Decode the input from btye literals to strings
                outputTARGET.write(str(wildcards.sampleGVT) + "\t%s\n" % line.decode("utf-8").strip())
#-------------------------------------------------------------------------------------------------------
