#-----------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:     2017-03-06                                      
#-----------------------------------------------------------
# Call: call("python " + ROOT_PATH + "/modules/varScan/varScan.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Rule specific configurations set in:      varScan.json    
# Rule specific parameters set in:          varScan.yaml    
# Input:                                    .chr.varType.vcf
# Output:                                   .varType.vcf    
# Purpose: Generate VCF output from a MPileup file. Able to 
#   perform analysis on a per-chromosome basis if requested.
#-----------------------------------------------------------
from time import localtime, strftime
from subprocess import call

rule mpileup2MERGE:
    input:
        expand("{outputDIR}/{varScanSplitDIR}/{{sampleMPU2M}}_{chrMPU2M}.varScan.{{varTypeMPU2M}}.vcf", outputDIR=config["outputDIR"], varScanSplitDIR=config["varScanSplitDIR"], chrMPU2M=config["chrLIST"])
    output:
        expand("{outputDIR}/{varScanDIR}/{{sampleMPU2M}}.varScan.{{varTypeMPU2M}}.vcf", outputDIR=config["outputDIR"], varScanDIR=config["varScanDIR"])
    params:
        logNAME="mpileup2MERGE." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["varScanDIR"]
    run:
        call('echo "' + str(params.logNAME) + ':\n **Python Scripts Merging Files. No Shell Calls**\n" >> ' + config["shellCallFile"], shell=True)
        with open(str(output), "w+") as outputTARGET:
            # A1. Copy over header-data shared across all .VCF files
            with open(str(input[0]), "r+") as inputTARGET:
                for line in inputTARGET:
                    if line.startswith("#"):
                        outputTARGET.write(line)
            # B1. Iterate over all input files
            for file in str(input).split():
                with open(file, "r+") as inputTARGET:
                    # B2 Iterate over each line for current input files
                    for line in inputTARGET:
                        if line.startswith("#") == False:
                            outputTARGET.write(line)
#-------------------------------------------------------------------------------------------------------
