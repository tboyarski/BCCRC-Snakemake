#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski
# Date:     2017-05-24
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + ROOT_PATH + "/modules/varScan/varScan.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .mpileup
# Output:                                   .snp.vcf
#                                           .indel.vcf
# Purpose: Generate '.VCF' output from a '.mpileup' file.         
#
#   **Note** Varscan somatic must produce both snp and
#       indel file, no calls exist to get only one or other.
#       Vartype will always equal ['snp', 'indel'].
#-----------------------------------------------------------------------------------------------------------------------------------------------------

# Used for timestamping the log files.
from time import localtime, strftime

# Used for system calls.
from subprocess import call

#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
rule mpileup2vcf_PairUNSPLIT:
    input:
        expand("{outputDIR}/{mpileupDIR}/{{samplenMPU2VCFPU}}.mpileup", outputDIR=config["outputDIR"], mpileupDIR=config["mpileupDIR"]),
        expand("{outputDIR}/{mpileupDIR}/{{sampletMPU2VCFPU}}.mpileup", outputDIR=config["outputDIR"], mpileupDIR=config["mpileupDIR"])
    output:
        expand("{outputDIR}/{varScanDIR}/{{sampletMPU2VCFPU}}_{{samplenMPU2VCFPU}}.varScan.{varTypeMPU2VCFPU}.vcf", outputDIR=config["outputDIR"], varScanDIR=config["varScanDIR"], varTypeMPU2VCFPU=config["varType"])
    params:
        baseArgs=config["minCOV"]+" "+config["minREAD"]+" "+config["minQUAL"]+" "+config["minFREQ"]+" "+config["pVALUE"]+" "+config["strandFILT"]+" "+config["outVCF"]+" "+config["minSTRAND"]+" "+config["posVALID"],
        baseFile=config["outputDIR"] + '/' + config["varScanDIR"] + '/{sampletMPU2VCFPU}_{samplenMPU2VCFPU}.',
        logNAME="mpileup2vcf_PairUNSPLIT." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["varScanDIR"] + "/mpileup2vcf_PairUNSPLIT/"
    run:
        # 1.A - Base call string.
        callString=config["varScan_varScanProg"] + ' somatic ' + str(input) \
        +  ' --output-snp ' + str(output[0]) + ' --output-indel ' + str(output[1]) + ' ' + str(params.baseArgs)

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log) + '/' + str(params.logNAME) + '.stderr'

        # 1.C - Add short ciruiting removal of inputs to end of shell call.
        if config["intermediateKEEP"] == False:
            callString += ' && rm ' + str(input[0]) + ' ' + str(input[1])

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "' + str(params.logNAME) + ':\n ' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
