#-----------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:     2017-03-24                                      
#-----------------------------------------------------------
# Call: call("python " + ROOT_PATH + "/modules/varScan/varScan.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Rule specific configurations set in:      varScan.json    
# Rule specific parameters set in:          varScan.yaml    
# Input:                                    .mpileup        
# Output:                                   .indels.vcf     
# Purpose: Generate VCF output from a MPileup file. Able to 
#   perform analysis on a per-chromosome basis if requested.
#-----------------------------------------------------------
from time import localtime, strftime
from subprocess import call

# Provide different input files depending on if running split-chromosome.
def varScanSplit(wildcards):
    if config["varScanChrSplit"] == True:
        return expand("{outputDIR}/{mpileDIR}/{samples}.{chr}.mpileup", outputDIR=config["outputDIR"], mpileDIR=config["mpileDIR"], chr=config["chrLIST"], samples=wildcards.samples)
    elif config["varScanChrSplit"] == False:
        return expand("{outputDIR}/{mpileDIR}/{samples}.mpileup", outputDIR=config["outputDIR"], mpileDIR=config["mpileDIR"], samples=wildcards.samples)


rule mpileup2indel:
    input:
        # Function to determine the inputs depending on if split chromosome or not. 
        varScanSplit
    output:
        expand("{outputDIR}/{vcfDIR}/{{samples}}.varScan.indels.vcf", outputDIR=config["outputDIR"], vcfDIR=config["vcfDIR"])
    params:
        baseArgs = config["minCOV"]+" "+config["minREAD"]+" "+config["minQUAL"]+" "+config["minFREQ"]+" "+config["pVALUE"]+" "+config["strandFILT"]+" "+config["outVCF"],
        logNAME="mpileup2indel." + strftime("%Y-%m-%d.%H-%M-%S", localtime())
    log:
        "log/" + config["varScanDIR"]
    run:
        # A. Check if we are splitting by chromosome
        if config["varScanChrSplit"] == True:
            # A1. Generate a .VCF file for each chromosome 
            for index in range(len(config["chrLIST"])):
                call(config["mpileup2indel_varScanProg"] + " mpileup2indel " + str(input[index]) + " " + str(params.baseArgs) + " > " \
                + config["outputDIR"] + "/"+ config["vcfDIR"] + "/" + wildcards.samples + "." + config["chrLIST"][index] + ".varScan.indels.vcf" \
                + " 2> " + str(log) + "/" + str(params.logNAME) + "." + config["chrLIST"][index] + ".stderr", shell=True)
            # A2. Copy over data shared across all .VCF files
            call("grep '#' " + config["outputDIR"] + "/"+ config["vcfDIR"] + "/" + wildcards.samples + "." + config["chrLIST"][0] + ".varScan.indels.vcf > " + str(output) \
                + " 2> " + str(log) + "/" + str(params.logNAME) + "." + config["chrLIST"][0] + ".header.stderr", shell=True)
            print("The samples.varScan.indels.vcf should have been made now")
            # A3. Concatenate all .VCF files into one core file, delete all chromosome based .VCF when finished
            for index in range(len(config["chrLIST"])):
                call('grep -v "#" ' \
                + config["outputDIR"] + '/'+ config["vcfDIR"] + '/'+ wildcards.samples + '.' + config["chrLIST"][index] + '.varScan.indels.vcf >> ' + str(output) \
                + ' 2> ' + str(log) + '/' + str(params.logNAME) + '.' + config["chrLIST"][index] + '.stderr' \
                + ' & rm ' + config["outputDIR"] + '/' + config["vcfDIR"] + '/' + wildcards.samples + '.' + config["chrLIST"][index] + '.varScan.indels.vcf' \
                + ' 2> ' + str(log) + '/' + str(params.logNAME) + '.' + config["chrLIST"][index] + '.stderr', shell=True)

        # B. Not splitting by chromosome
        elif config["varScanChrSplit"] == False:
            # B1. Generate a .VCF file of entire sample
            call(config["mpileup2indel_varScanProg"] + " mpileup2indel " + str(input) + " " + str(params.baseArgs) + " > " + str(output) + " 2> " + str(log) + "/" + str(params.logNAME) + ".stderr", shell=True)
#-------------------------------------------------------------------------------------------------------
