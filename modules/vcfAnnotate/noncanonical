#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:	    2017-07-05
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/vcfAnnotate/vcfAnnotate.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                    .vcf   
#
# Output:                                   .noncanonical_annotated.vcf   
#
# Purpose: Annotate a '.VCF' file via canonical form.
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for system calls.
from subprocess import call

# Used for timestamping the log files.
from time import localtime, strftime
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule noncanonical:
    input:
        inputVCF =  temp("{pathNCAN}/{sampleNCAN}.vcf")
    output:
        outputVCF = "{pathNCAN}/{sampleNCAN}.noncanonical_annotated.vcf", 
        summaryHTML="{pathNCAN}/{sampleNCAN}.canonical.summary.html", 
        genesTXT =  "{pathNCAN}/{sampleNCAN}.canonical.summary.genes.txt" 
    params:
        baseARGS=config["annotateVerbose"]+' '+config["snpEffConfig"]+' '+config["snpEffFormat"] \
            +' '+config["snpEffDownstream"]+' '+config["snpEffIntergenic"]+' '+config["snpEffUpstream"] \
            +' '+config["snpEffgatk"]+' '+config["snpEffTranscript"]+' '+config["snpEffHGVS"]
    log:
        stdErr = "log/" + config["vcfAnnotateDIR"] + '/noncanonical/noncanonical_{sampleNCAN}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run: 
        # 1.A - Base call string.
        callString=config["vcfAnnotate_javaProg"] + ' ' + config["vcfAnnotate_snpEffProg"] \
        + ' eff ' + str(params.baseARGS) + ' ' + config["snpEffGenomeVersion"] \
        + ' -s ' + str(output.summaryHTML) \
        + ' ' + str(input.inputVCF) + ' > ' + str(output.outputVCF) 

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)

        # 1.C - Add short ciruiting removal of inputs to end of shell call.
        if config["intermediateKEEP"] == False:
            callString += ' && rm ' + str(input.inputVCF)

        # 2.A -  Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr) + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
