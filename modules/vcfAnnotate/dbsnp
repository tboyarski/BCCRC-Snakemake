#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Author:   Tim Boyarski                                    
# Date:     2017-07-05
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# Call: call("python " + snakeDIR + "/modules/vcfAnnotate/vcfAnnotate.py " + YAMLFILE + " " + CLUSTERFILE + " " + SNAKEFILE, shell=True)
# Input:                                        .vcf
#
# Output:                                       .dpsnp_annotated.vcf
#
# Purpose: Annotate a '.VCF' file using dbsnp.
#-----------------------------------------------------------------------------------------------------------------------------------------------------
# PYTHON PACKAGES #
#------------------
# Used for system calls.
from subprocess import call

# Used for timestamping the log files.
from time import localtime, strftime
#-----------------------------------------------------------------------------------------------------------------------------------------------------



#-----------------------------------------------------------------------------------------------------------------------------------------------------
# SNAKEMAKE RULE #
#-----------------
rule dbsnp:
    input:
        inputVCF = "{pathDbSnp}/{sampleDbSnp}.vcf"
    output:
        outputVCF = temp("{pathDbSnp}/{sampleDbSnp}.dbsnp_annotated.vcf")
    log:
        stdErr = "log/" + config["vcfAnnotateDIR"] + '/dbsnp/dbsnp_{sampleDbSnp}.' + strftime("%Y-%m-%d.%H-%M-%S", localtime()) + '.stderr'
    run:
        # 1.A - Base call string. 
        callString=config["vcfAnnotate_javaProg"] + ' ' + config["vcfAnnotate_snpSiftProg"] \
        + ' annotate ' + config["annotateDbSnp"] + ' ' + str(input.inputVCF) + ' > ' + str(output.outputVCF)

        # 1.B - Differing output redirection as when not on cluster we cannot use the cluster config file.
        if config["offCluster"]:
            callString += ' 2> ' + str(log.stdErr)

         # 2.A - Printing system calls to a local file, and then executing them.
        call('echo "#' + str(log.stdErr) + ':\n#' + callString + '\n" >> ' + config["shellCallFile"], shell=True)
        call(callString, shell=True)
#-----------------------------------------------------------------------------------------------------------------------------------------------------
