#---------------------
# Author: tboyarski
# Date: 2017-04-28.20-29-37
#---------------------
# Call using: snakemake --jobs 10 --cluster-config input/config.json --drmaa "{cluster.clusterSpec}"

import pandas
# Global config:
configfile: "input/config.yaml"

# Global rule to pull all output files:
rule all:
    input:
        # Pair: Tumor-Normal Runs
        #expand("{outputDIR}/{annotateDIR}/{index[1][tumor]}_{index[1][normal]}.varScan.{varType}.canonical_annotated{annotationSUFFIX}.vcf", outputDIR=config["outputDIR"], annotateDIR=config["annotateDIR"], index=pandas.read_table(config["sampleFILE"], " ").iterrows(), varType=config["varType"], annotationSUFFIX=config["annotationSUFFIX"])
        #expand("{outputDIR}/{getVarTableDIR}/{index[1][tumor]}_{index[1][normal]}.varScan.{varType}.canonical_annotated{annotationSUFFIX}.txt", outputDIR=config["outputDIR"], getVarTableDIR=config["getVarTableDIR"], index=pandas.read_table(config["sampleFILE"], " ").iterrows(), varType=config["varType"], annotationSUFFIX=config["annotationSUFFIX"])
        # Single: Normal Runs
        #expand("{outputDIR}/{annotateDIR}/{samples}.varScan.{varType}.canonical_annotated{annotationSUFFIX}.vcf", outputDIR=config["outputDIR"], annotateDIR=config["annotateDIR"], samples=config["sample"], varType=config["varType"], annotationSUFFIX=config["annotationSUFFIX"])
        #expand("{outputDIR}/{varScanDIR}/{samples}.varScan.{varType}.vcf", outputDIR=config["outputDIR"], varScanDIR=config["varScanDIR"], samples=config["sample"], varType=config["varType"])
        expand("{outputDIR}/{getVarTableDIR}/{samples}.varScan.{varType}.canonical_annotated{annotationSUFFIX}.txt", outputDIR=config["outputDIR"], getVarTableDIR=config["getVarTableDIR"], samples=config["sample"], varType=config["varType"], annotationSUFFIX=config["annotationSUFFIX"])
        #expand("{outputDIR}/{reBamDIR}/{samples}{fileTAG}.bam.bai", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"], fileTAG=config["fileTAG"])
        #expand("{outputDIR}/{reBamDIR}/{samples}_realigned.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"])
        #expand("{outputDIR}/{fastqDIR}/{samples}.{version}.fastq.gz", outputDIR=config["outputDIR"], fastqDIR=config["fastqDIR"], samples=config["sample"], version=["1", "2"])

#**** reBam ****:
#  Included:
#    undoBAM:    Fastq generation from a BAM file
#    alignBAM:   BAM generation from a Fastq file
#    sortBAM:    Sorting of the BAM file
#    indexBAM:   Indexing of a BAM file
#    filteredBAM:Filtering of a BAM file on read quality
#    rmdupBAM:   Remove dupliates in a BAM file
#  Files:
#    input:      X.BAM
#    output:     X_realigned_sorted.BAM.
#                X_realigned_sorted.BAM.BAI
#include: "/home/tboyarski/share/projects/tboyarski/gitRepo-LCR-BCCRC/Snakemake/modules/reBam/reBam_INCLUDE"
#  Required: NONE
#  Call via:
#  expand("{outputDIR}/{fastqDIR}/{samples}.{version}.fastq", outputDIR=config["outputDIR"], fastqDIR=config["fastqDIR"], samples=config["sample"], version=["1", "2"])                 #undoBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}_realigned.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"])                                       #alignBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}_sorted.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"])                                          #sortBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}.bam.bai", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"])                                             #indexBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}{fileTAG}.bam.bai", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"], fileTAG=config["fileTAG"])         #indexBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}_realigned_sorted.bam.bai", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"], fileTAG=config["fileTAG"]) #indexBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}_filtered.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"])                                        #filteredBAM
#  expand("{outputDIR}/{reBamDIR}/{samples}_rmdup.bam", outputDIR=config["outputDIR"], reBamDIR=config["reBamDIR"], samples=config["sample"])                                           #rmdupBAM


#***** mPile *****
#  Included:
#    mPileUNSPLIT:     Generated mpileup file from BAM file.
#    mPileSPLIT:     Generated mpileup file from BAM file.
#  Files:
#    Input:      .BAM
#    Output:     .mpileup
include: "/home/tboyarski/share/projects/tboyarski/gitRepo-LCR-BCCRC/Snakemake/modules/mPile/mPile_INCLUDE"
#  Required: NONE
#  Call via: 
#    expand("{outputDIR}/{mpileDIR}/{samples}.mpileup", outputDIR=config["outputDIR"], mpileDIR=config["mpileDIR"], samples=config["sample"])


#***** varScan *****
#  Included:
#    mpileup2snp:    Generate VCF output of SNPs from a mPileUp file.
#    mpileup2indel:    Generate VCF output of INDELs from a mPileUp file.
#    somTumorNormalUNSPLIT:    Generate VCF output for tumor-normal pairs.
#    somTumorNormalSPLIT:    Genereate VCF output for tumor-normal pairs, process chromosomes in parallel.
#    somTumorNormalMERGE:    Combine single chromosome VCF tumor-normal pairs output into single file.
#  Files:
#    input:      X.mpileup
#    output:     X.varScan.snps.vcf
#                X.varScan.indels.vcf
include: "/home/tboyarski/share/projects/tboyarski/gitRepo-LCR-BCCRC/Snakemake/modules/varScan/varScan_INCLUDE"
#  Required:
#    >mPile:      Generate a MPileUp file from a BAM file.
#    @include: "/home/tboyarski/share/projects/tboyarski/gitRepo-LCR-BCCRC/Snakemake/modules/mPile/mPile_INCLUDE"
#  Call via:
# expand("{outputDIR}/{vcfDIR}/{samples}.varScan.{varType}.vcf", outputDIR=config["outputDIR"], vcfDIR=config["vcfDIR"], samples=config["sample"], varType=config["varType"])      #mpileup2
# expand("{outputDIR}/{vcfDIR}/{index[1][tumor]}_{index[1][normal]}.varScan.{varType}.txt", outputDIR=config["outputDIR"], vcfDIR=config["vcfDIR"], index=pandas.read_table(config["sampleFILE"], " ").iterrows(), varType=config["varType"])  #somTumorNormal


#***** annotate *****
#  Included:
#    annotate:     Annotation of a '.VCF' file.
#  Files:
#    Input:      .vcf
#    Output:     .annotate.vcf
include: "/home/tboyarski/share/projects/tboyarski/gitRepo-LCR-BCCRC/Snakemake/modules/annotate/annotate_INCLUDE"
#  Required: NONE
#  Call via: 
#    expand("{outputDIR}/{annotateDIR}/{samples}.BAMjsonYAML", outputDIR=config["outputDIR"], annotateDIR=config["annotateDIR"], samples=config["sample"])


#***** getVarTable *****
#  Included:
#    getVarTable:     Generates a '.TXT' file from a '.VCF' file.
#  Files:
#    Input:      .vcf
#    Output:     .txt
include: "/home/tboyarski/share/projects/tboyarski/gitRepo-LCR-BCCRC/Snakemake/modules/getVarTable/getVarTable_INCLUDE"
#  Required: NONE
#  Call via: 
#  expand("{outputDIR}/{getVarTableDIR}/{samples}.varScan.snps.txt", outputDIR=config["outputDIR"], getVarTableDIR=config["getVarTableDIR"], samples=config["sample"])
#  expand("{outputDIR}/{getVarTableDIR}/{index[1][tumor]}_{index[1][normal]}.varScan.{varType}.txt", outputDIR=config["outputDIR"], getVarTableDIR=config["getVarTableDIR"], index=pandas.read_table(config["sampleFILE"], " ").iterrows(), varType=config["varType"])
